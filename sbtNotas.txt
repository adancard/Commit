import React, { useState, useEffect } from 'react';
import { ScrollView, StyleSheet, Switch, Text, TextInput, TouchableOpacity, View } from 'react-native';
import { Picker } from '@react-native-picker/picker';

export default function App() {
  // Declaração de estados
  const [textCompetencia, setTextCompetencia] = useState('');
  const [escolhaBotao, setEscolhaBotao] = useState('');
  const [textCriticidade, setTextCriticidade] = useState('');
  const [isEnable, setIsEnable] = useState(false);
  const [criterios, setCriterios] = useState([]);
  const [competencias, setCompetencias] = useState([]);
  const [criteriosDaCompetencia, setCriteriosDaCompetencia] = useState([]);

  // Função para buscar competências e critérios ao carregar o componente
  useEffect(() => {
    const fetchCompetencias = async () => {
      try {
        const response = await fetch('http://localhost:8080/Competencia/competencias');
        const data = await response.json();
        setCompetencias(data);
      } catch (error) {
        console.error('Erro ao buscar as competências:', error);
      }
    };

    const fetchCriterios = async () => {
      try {
        const response = await fetch('http://localhost:8080/Criterios/BuscarCriterios');
        const data = await response.json();
        setCriterios(data);
      } catch (error) {
        console.error('Erro ao buscar os critérios:', error);
      }
    };

    fetchCompetencias();
    fetchCriterios();
  }, []);

  // Função para carregar critérios de uma competência específica
  const carregarCriteriosDaCompetencia = async (competenciaId) => {
    try {
      const response = await fetch(`http://localhost:8080/consulta_Competencia/${competenciaId}`);
      const data = await response.json();
      setCriteriosDaCompetencia(data);
    } catch (error) {
      console.error('Erro ao carregar os critérios:', error);
    }
  };

  // Função para confirmar e enviar dados das competências e critérios
  const onPressConfirmar = async () => {
    try {
      const responseCompetencia = await fetch('http://localhost:8080/Competencia/CriarCompetencia', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ nome: textCompetencia, tipo: escolhaBotao }),
      });

      if (!responseCompetencia.ok) {
        console.error('Falha ao enviar os dados da competência.');
      }

      const tipoCriticidade = isEnable ? 'critica' : 'desejada';

      const responseCriterio = await fetch('http://localhost:8080/Criterios/CriarCriterio', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ nome: textCriticidade, tipoCriticidades: tipoCriticidade }),
      });

      if (!responseCriterio.ok) {
        console.error('Falha ao enviar os dados do critério.');
      }
    } catch (error) {
      console.error('Erro ao enviar os dados:', error);
    }
  };

  return (
    <ScrollView style={styles.container}>
      <Text style={styles.titulo}>Adicionar Competência</Text>
      <View style={styles.Containersbt}>
        <TouchableOpacity style={styles.botao} onPress={() => setEscolhaBotao('socioemocional')}>
          <Text style={styles.textoButton}>S</Text>
        </TouchableOpacity>
        <TouchableOpacity style={styles.botao} onPress={() => setEscolhaBotao('basica')}>
          <Text style={styles.textoButton}>B</Text>
        </TouchableOpacity>
        <TouchableOpacity style={styles.botao} onPress={() => setEscolhaBotao('tecnica')}>
          <Text style={styles.textoButton}>T</Text>
        </TouchableOpacity>
      </View>
      <TextInput
        style={styles.InputText}
        value={textCompetencia}
        onChangeText={setTextCompetencia}
        placeholder="Digite a Competência"
      />
      <Text style={styles.tituloCriticidade}>Adicionar Critério</Text>
      <Text style={styles.texto}>Selecione uma competência:</Text>
      <Picker
        selectedValue={textCompetencia}
        style={styles.picker}
        onValueChange={(itemValue) => {
          setTextCompetencia(itemValue);
          carregarCriteriosDaCompetencia(itemValue);
        }}
      >
        {competencias.map((competencia) => (
          <Picker.Item
            key={competencia.id_competencia}
            label={competencia.nome}
            value={competencia.id_competencia}
          />
        ))}
      </Picker>
      <TextInput
        style={styles.InputText}
        value={textCriticidade}
        onChangeText={setTextCriticidade}
        placeholder="Digite o Critério"
      />
      <View style={styles.caixaSelecao}>
        <Text style={styles.textoSelecao}>Desejável</Text>
        <Switch
          trackColor={{ false: 'green', true: 'red' }}
          onValueChange={() => setIsEnable(!isEnable)}
          value={isEnable}
          style={styles.criticoEdesejavel}
        />
        <Text style={styles.textoSelecao}>Crítico</Text>
      </View>
      <TouchableOpacity style={styles.confirmar} onPress={onPressConfirmar}>
        <Text style={styles.buttonConfirmar}>Confirmar</Text>
      </TouchableOpacity>
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1 },
  Containersbt: {
    alignSelf: 'center',
    justifyContent: 'space-between',
    alignItems: 'center',
    flexDirection: 'row',
    width: 300,
    marginTop: 20,
  },
  titulo: {
    textAlign: 'center',
    fontSize: 25,
    marginTop: 50,
  },
  tituloCriticidade: {
    textAlign: 'center',
    fontSize: 25,
    marginTop: 50,
  },
  botao: {
    borderColor: 'black',
    borderWidth: 1,
    width: 50,
    height: 50,
    borderRadius: 25,
    justifyContent: 'center',
    alignItems: 'center',
    margin: 20,
  },
  textoButton: { textAlign: 'center' },
  InputText: {
    alignSelf: 'center',
    borderColor: 'black',
    borderWidth: 1,
    textAlign: 'center',
    width: 300,
    marginTop: 30,
  },
  confirmar: {
    alignSelf: 'center',
    backgroundColor: 'green',
    marginTop: 30,
    height: 40,
    width: 200,
    borderRadius: 15,
    justifyContent: 'center',
  },
  buttonConfirmar: { color: 'white', textAlign: 'center', paddingVertical: 10 },
  caixaSelecao: {
    alignSelf: 'center',
    flexDirection: 'row',
    marginTop: 20,
  },
  textoSelecao: { fontSize: 20, alignSelf: 'center' },
  picker: {
    width: 300,
    alignSelf: 'center',
    marginTop: 20,
  },
  texto: { textAlign: 'center', marginTop: 30 },
  criticoEdesejavel: { marginHorizontal: 10 },
});
